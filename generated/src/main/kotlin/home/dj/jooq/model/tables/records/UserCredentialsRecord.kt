/*
 * This file is generated by jOOQ.
 */
package home.dj.jooq.model.tables.records


import home.dj.jooq.model.tables.UserCredentials

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserCredentialsRecord() : UpdatableRecordImpl<UserCredentialsRecord>(UserCredentials.USER_CREDENTIALS), Record6<Int?, String?, Int?, LocalDateTime?, LocalDateTime?, String?> {

    var id: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var credential: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var userId: Int?
        set(value) = set(2, value)
        get() = get(2) as Int?

    var createdAt: LocalDateTime?
        set(value) = set(3, value)
        get() = get(3) as LocalDateTime?

    var updatedAt: LocalDateTime?
        set(value) = set(4, value)
        get() = get(4) as LocalDateTime?

    var createdBy: String?
        set(value) = set(5, value)
        get() = get(5) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<Int?, String?, Int?, LocalDateTime?, LocalDateTime?, String?> = super.fieldsRow() as Row6<Int?, String?, Int?, LocalDateTime?, LocalDateTime?, String?>
    override fun valuesRow(): Row6<Int?, String?, Int?, LocalDateTime?, LocalDateTime?, String?> = super.valuesRow() as Row6<Int?, String?, Int?, LocalDateTime?, LocalDateTime?, String?>
    override fun field1(): Field<Int?> = UserCredentials.USER_CREDENTIALS.ID
    override fun field2(): Field<String?> = UserCredentials.USER_CREDENTIALS.CREDENTIAL
    override fun field3(): Field<Int?> = UserCredentials.USER_CREDENTIALS.USER_ID
    override fun field4(): Field<LocalDateTime?> = UserCredentials.USER_CREDENTIALS.CREATED_AT
    override fun field5(): Field<LocalDateTime?> = UserCredentials.USER_CREDENTIALS.UPDATED_AT
    override fun field6(): Field<String?> = UserCredentials.USER_CREDENTIALS.CREATED_BY
    override fun component1(): Int? = id
    override fun component2(): String? = credential
    override fun component3(): Int? = userId
    override fun component4(): LocalDateTime? = createdAt
    override fun component5(): LocalDateTime? = updatedAt
    override fun component6(): String? = createdBy
    override fun value1(): Int? = id
    override fun value2(): String? = credential
    override fun value3(): Int? = userId
    override fun value4(): LocalDateTime? = createdAt
    override fun value5(): LocalDateTime? = updatedAt
    override fun value6(): String? = createdBy

    override fun value1(value: Int?): UserCredentialsRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): UserCredentialsRecord {
        this.credential = value
        return this
    }

    override fun value3(value: Int?): UserCredentialsRecord {
        this.userId = value
        return this
    }

    override fun value4(value: LocalDateTime?): UserCredentialsRecord {
        this.createdAt = value
        return this
    }

    override fun value5(value: LocalDateTime?): UserCredentialsRecord {
        this.updatedAt = value
        return this
    }

    override fun value6(value: String?): UserCredentialsRecord {
        this.createdBy = value
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: Int?, value4: LocalDateTime?, value5: LocalDateTime?, value6: String?): UserCredentialsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /**
     * Create a detached, initialised UserCredentialsRecord
     */
    constructor(id: Int? = null, credential: String? = null, userId: Int? = null, createdAt: LocalDateTime? = null, updatedAt: LocalDateTime? = null, createdBy: String? = null): this() {
        this.id = id
        this.credential = credential
        this.userId = userId
        this.createdAt = createdAt
        this.updatedAt = updatedAt
        this.createdBy = createdBy
    }
}
