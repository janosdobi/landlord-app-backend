/*
 * This file is generated by jOOQ.
 */
package home.dj.jooq.model.tables


import home.dj.jooq.model.LandlordApp
import home.dj.jooq.model.keys.AGREEMENTS_PKEY
import home.dj.jooq.model.keys.AGREEMENTS__AGREEMENTS_LANDLORD_ID_FKEY
import home.dj.jooq.model.keys.AGREEMENTS__AGREEMENTS_TENANT_ID_FKEY
import home.dj.jooq.model.tables.records.AgreementsRecord

import java.math.BigDecimal
import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row13
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Agreements(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, AgreementsRecord>?,
    aliased: Table<AgreementsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<AgreementsRecord>(
    alias,
    LandlordApp.LANDLORD_APP,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>landlord_app.agreements</code>
         */
        val AGREEMENTS = Agreements()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<AgreementsRecord> = AgreementsRecord::class.java

    /**
     * The column <code>landlord_app.agreements.id</code>.
     */
    val ID: TableField<AgreementsRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>landlord_app.agreements.start_date</code>.
     */
    val START_DATE: TableField<AgreementsRecord, LocalDateTime?> = createField(DSL.name("start_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>landlord_app.agreements.end_date</code>.
     */
    val END_DATE: TableField<AgreementsRecord, LocalDateTime?> = createField(DSL.name("end_date"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>landlord_app.agreements.tenant_id</code>.
     */
    val TENANT_ID: TableField<AgreementsRecord, Int?> = createField(DSL.name("tenant_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>landlord_app.agreements.landlord_id</code>.
     */
    val LANDLORD_ID: TableField<AgreementsRecord, Int?> = createField(DSL.name("landlord_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>landlord_app.agreements.rent_amount</code>.
     */
    val RENT_AMOUNT: TableField<AgreementsRecord, BigDecimal?> = createField(DSL.name("rent_amount"), SQLDataType.NUMERIC.nullable(false), this, "")

    /**
     * The column <code>landlord_app.agreements.rent_currency</code>.
     */
    val RENT_CURRENCY: TableField<AgreementsRecord, String?> = createField(DSL.name("rent_currency"), SQLDataType.VARCHAR(3).nullable(false), this, "")

    /**
     * The column <code>landlord_app.agreements.utility_amount</code>.
     */
    val UTILITY_AMOUNT: TableField<AgreementsRecord, BigDecimal?> = createField(DSL.name("utility_amount"), SQLDataType.NUMERIC.nullable(false), this, "")

    /**
     * The column <code>landlord_app.agreements.utility_currency</code>.
     */
    val UTILITY_CURRENCY: TableField<AgreementsRecord, String?> = createField(DSL.name("utility_currency"), SQLDataType.VARCHAR(3).nullable(false), this, "")

    /**
     * The column <code>landlord_app.agreements.milestone_day</code>.
     */
    val MILESTONE_DAY: TableField<AgreementsRecord, Int?> = createField(DSL.name("milestone_day"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>landlord_app.agreements.created_at</code>.
     */
    val CREATED_AT: TableField<AgreementsRecord, LocalDateTime?> = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>landlord_app.agreements.updated_at</code>.
     */
    val UPDATED_AT: TableField<AgreementsRecord, LocalDateTime?> = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>landlord_app.agreements.created_by</code>.
     */
    val CREATED_BY: TableField<AgreementsRecord, String?> = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<AgreementsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<AgreementsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>landlord_app.agreements</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>landlord_app.agreements</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>landlord_app.agreements</code> table reference
     */
    constructor(): this(DSL.name("agreements"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, AgreementsRecord>): this(Internal.createPathAlias(child, key), child, key, AGREEMENTS, null)
    override fun getSchema(): Schema = LandlordApp.LANDLORD_APP
    override fun getIdentity(): Identity<AgreementsRecord, Int?> = super.getIdentity() as Identity<AgreementsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<AgreementsRecord> = AGREEMENTS_PKEY
    override fun getKeys(): List<UniqueKey<AgreementsRecord>> = listOf(AGREEMENTS_PKEY)
    override fun getReferences(): List<ForeignKey<AgreementsRecord, *>> = listOf(AGREEMENTS__AGREEMENTS_TENANT_ID_FKEY, AGREEMENTS__AGREEMENTS_LANDLORD_ID_FKEY)

    private lateinit var _agreementsTenantIdFkey: Users
    private lateinit var _agreementsLandlordIdFkey: Users
    fun agreementsTenantIdFkey(): Users {
        if (!this::_agreementsTenantIdFkey.isInitialized)
            _agreementsTenantIdFkey = Users(this, AGREEMENTS__AGREEMENTS_TENANT_ID_FKEY)

        return _agreementsTenantIdFkey;
    }
    fun agreementsLandlordIdFkey(): Users {
        if (!this::_agreementsLandlordIdFkey.isInitialized)
            _agreementsLandlordIdFkey = Users(this, AGREEMENTS__AGREEMENTS_LANDLORD_ID_FKEY)

        return _agreementsLandlordIdFkey;
    }
    override fun `as`(alias: String): Agreements = Agreements(DSL.name(alias), this)
    override fun `as`(alias: Name): Agreements = Agreements(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Agreements = Agreements(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Agreements = Agreements(name, null)

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row13<Int?, LocalDateTime?, LocalDateTime?, Int?, Int?, BigDecimal?, String?, BigDecimal?, String?, Int?, LocalDateTime?, LocalDateTime?, String?> = super.fieldsRow() as Row13<Int?, LocalDateTime?, LocalDateTime?, Int?, Int?, BigDecimal?, String?, BigDecimal?, String?, Int?, LocalDateTime?, LocalDateTime?, String?>
}
