/*
 * This file is generated by jOOQ.
 */
package home.dj.jooq.model.keys


import home.dj.jooq.model.tables.Agreements
import home.dj.jooq.model.tables.Costs
import home.dj.jooq.model.tables.Invoices
import home.dj.jooq.model.tables.UserCredentials
import home.dj.jooq.model.tables.UserRoles
import home.dj.jooq.model.tables.Users
import home.dj.jooq.model.tables.records.AgreementsRecord
import home.dj.jooq.model.tables.records.CostsRecord
import home.dj.jooq.model.tables.records.InvoicesRecord
import home.dj.jooq.model.tables.records.UserCredentialsRecord
import home.dj.jooq.model.tables.records.UserRolesRecord
import home.dj.jooq.model.tables.records.UsersRecord

import org.jooq.ForeignKey
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal



// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

val AGREEMENTS_PKEY: UniqueKey<AgreementsRecord> = Internal.createUniqueKey(Agreements.AGREEMENTS, DSL.name("agreements_pkey"), arrayOf(Agreements.AGREEMENTS.ID), true)
val COSTS_PKEY: UniqueKey<CostsRecord> = Internal.createUniqueKey(Costs.COSTS, DSL.name("costs_pkey"), arrayOf(Costs.COSTS.ID), true)
val INVOICES_PKEY: UniqueKey<InvoicesRecord> = Internal.createUniqueKey(Invoices.INVOICES, DSL.name("invoices_pkey"), arrayOf(Invoices.INVOICES.ID), true)
val USER_CREDENTIALS_PKEY: UniqueKey<UserCredentialsRecord> = Internal.createUniqueKey(UserCredentials.USER_CREDENTIALS, DSL.name("user_credentials_pkey"), arrayOf(UserCredentials.USER_CREDENTIALS.ID), true)
val USER_ROLES_PKEY: UniqueKey<UserRolesRecord> = Internal.createUniqueKey(UserRoles.USER_ROLES, DSL.name("user_roles_pkey"), arrayOf(UserRoles.USER_ROLES.ID), true)
val USERS_NAME_KEY: UniqueKey<UsersRecord> = Internal.createUniqueKey(Users.USERS, DSL.name("users_name_key"), arrayOf(Users.USERS.NAME), true)
val USERS_PKEY: UniqueKey<UsersRecord> = Internal.createUniqueKey(Users.USERS, DSL.name("users_pkey"), arrayOf(Users.USERS.ID), true)

// -------------------------------------------------------------------------
// FOREIGN KEY definitions
// -------------------------------------------------------------------------

val AGREEMENTS__AGREEMENTS_LANDLORD_ID_FKEY: ForeignKey<AgreementsRecord, UsersRecord> = Internal.createForeignKey(Agreements.AGREEMENTS, DSL.name("agreements_landlord_id_fkey"), arrayOf(Agreements.AGREEMENTS.LANDLORD_ID), home.dj.jooq.model.keys.USERS_PKEY, arrayOf(Users.USERS.ID), true)
val AGREEMENTS__AGREEMENTS_TENANT_ID_FKEY: ForeignKey<AgreementsRecord, UsersRecord> = Internal.createForeignKey(Agreements.AGREEMENTS, DSL.name("agreements_tenant_id_fkey"), arrayOf(Agreements.AGREEMENTS.TENANT_ID), home.dj.jooq.model.keys.USERS_PKEY, arrayOf(Users.USERS.ID), true)
val COSTS__COSTS_AGREEMENT_ID_FKEY: ForeignKey<CostsRecord, AgreementsRecord> = Internal.createForeignKey(Costs.COSTS, DSL.name("costs_agreement_id_fkey"), arrayOf(Costs.COSTS.AGREEMENT_ID), home.dj.jooq.model.keys.AGREEMENTS_PKEY, arrayOf(Agreements.AGREEMENTS.ID), true)
val COSTS__COSTS_INVOICE_ID_FKEY: ForeignKey<CostsRecord, InvoicesRecord> = Internal.createForeignKey(Costs.COSTS, DSL.name("costs_invoice_id_fkey"), arrayOf(Costs.COSTS.INVOICE_ID), home.dj.jooq.model.keys.INVOICES_PKEY, arrayOf(Invoices.INVOICES.ID), true)
val INVOICES__INVOICES_AGREEMENT_ID_FKEY: ForeignKey<InvoicesRecord, AgreementsRecord> = Internal.createForeignKey(Invoices.INVOICES, DSL.name("invoices_agreement_id_fkey"), arrayOf(Invoices.INVOICES.AGREEMENT_ID), home.dj.jooq.model.keys.AGREEMENTS_PKEY, arrayOf(Agreements.AGREEMENTS.ID), true)
val USER_CREDENTIALS__USER_CREDENTIALS_USER_ID_FKEY: ForeignKey<UserCredentialsRecord, UsersRecord> = Internal.createForeignKey(UserCredentials.USER_CREDENTIALS, DSL.name("user_credentials_user_id_fkey"), arrayOf(UserCredentials.USER_CREDENTIALS.USER_ID), home.dj.jooq.model.keys.USERS_PKEY, arrayOf(Users.USERS.ID), true)
val USER_ROLES__USER_ROLES_USER_ID_FKEY: ForeignKey<UserRolesRecord, UsersRecord> = Internal.createForeignKey(UserRoles.USER_ROLES, DSL.name("user_roles_user_id_fkey"), arrayOf(UserRoles.USER_ROLES.USER_ID), home.dj.jooq.model.keys.USERS_PKEY, arrayOf(Users.USERS.ID), true)
