/*
 * This file is generated by jOOQ.
 */
package home.dj.jooq.model.tables.records


import home.dj.jooq.model.enums.CostCategory
import home.dj.jooq.model.tables.Invoices

import java.math.BigDecimal
import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record11
import org.jooq.Row11
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class InvoicesRecord() : UpdatableRecordImpl<InvoicesRecord>(Invoices.INVOICES), Record11<Int?, LocalDateTime?, LocalDateTime?, Int?, BigDecimal?, CostCategory?, String?, ByteArray?, LocalDateTime?, LocalDateTime?, String?> {

    var id: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var startDate: LocalDateTime?
        set(value) = set(1, value)
        get() = get(1) as LocalDateTime?

    var endDate: LocalDateTime?
        set(value) = set(2, value)
        get() = get(2) as LocalDateTime?

    var agreementId: Int?
        set(value) = set(3, value)
        get() = get(3) as Int?

    var amount: BigDecimal?
        set(value) = set(4, value)
        get() = get(4) as BigDecimal?

    var costCategory: CostCategory?
        set(value) = set(5, value)
        get() = get(5) as CostCategory?

    var fileName: String?
        set(value) = set(6, value)
        get() = get(6) as String?

    var fileContent: ByteArray?
        set(value) = set(7, value)
        get() = get(7) as ByteArray?

    var createdAt: LocalDateTime?
        set(value) = set(8, value)
        get() = get(8) as LocalDateTime?

    var updatedAt: LocalDateTime?
        set(value) = set(9, value)
        get() = get(9) as LocalDateTime?

    var createdBy: String?
        set(value) = set(10, value)
        get() = get(10) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row11<Int?, LocalDateTime?, LocalDateTime?, Int?, BigDecimal?, CostCategory?, String?, ByteArray?, LocalDateTime?, LocalDateTime?, String?> = super.fieldsRow() as Row11<Int?, LocalDateTime?, LocalDateTime?, Int?, BigDecimal?, CostCategory?, String?, ByteArray?, LocalDateTime?, LocalDateTime?, String?>
    override fun valuesRow(): Row11<Int?, LocalDateTime?, LocalDateTime?, Int?, BigDecimal?, CostCategory?, String?, ByteArray?, LocalDateTime?, LocalDateTime?, String?> = super.valuesRow() as Row11<Int?, LocalDateTime?, LocalDateTime?, Int?, BigDecimal?, CostCategory?, String?, ByteArray?, LocalDateTime?, LocalDateTime?, String?>
    override fun field1(): Field<Int?> = Invoices.INVOICES.ID
    override fun field2(): Field<LocalDateTime?> = Invoices.INVOICES.START_DATE
    override fun field3(): Field<LocalDateTime?> = Invoices.INVOICES.END_DATE
    override fun field4(): Field<Int?> = Invoices.INVOICES.AGREEMENT_ID
    override fun field5(): Field<BigDecimal?> = Invoices.INVOICES.AMOUNT
    override fun field6(): Field<CostCategory?> = Invoices.INVOICES.COST_CATEGORY
    override fun field7(): Field<String?> = Invoices.INVOICES.FILE_NAME
    override fun field8(): Field<ByteArray?> = Invoices.INVOICES.FILE_CONTENT
    override fun field9(): Field<LocalDateTime?> = Invoices.INVOICES.CREATED_AT
    override fun field10(): Field<LocalDateTime?> = Invoices.INVOICES.UPDATED_AT
    override fun field11(): Field<String?> = Invoices.INVOICES.CREATED_BY
    override fun component1(): Int? = id
    override fun component2(): LocalDateTime? = startDate
    override fun component3(): LocalDateTime? = endDate
    override fun component4(): Int? = agreementId
    override fun component5(): BigDecimal? = amount
    override fun component6(): CostCategory? = costCategory
    override fun component7(): String? = fileName
    override fun component8(): ByteArray? = fileContent
    override fun component9(): LocalDateTime? = createdAt
    override fun component10(): LocalDateTime? = updatedAt
    override fun component11(): String? = createdBy
    override fun value1(): Int? = id
    override fun value2(): LocalDateTime? = startDate
    override fun value3(): LocalDateTime? = endDate
    override fun value4(): Int? = agreementId
    override fun value5(): BigDecimal? = amount
    override fun value6(): CostCategory? = costCategory
    override fun value7(): String? = fileName
    override fun value8(): ByteArray? = fileContent
    override fun value9(): LocalDateTime? = createdAt
    override fun value10(): LocalDateTime? = updatedAt
    override fun value11(): String? = createdBy

    override fun value1(value: Int?): InvoicesRecord {
        this.id = value
        return this
    }

    override fun value2(value: LocalDateTime?): InvoicesRecord {
        this.startDate = value
        return this
    }

    override fun value3(value: LocalDateTime?): InvoicesRecord {
        this.endDate = value
        return this
    }

    override fun value4(value: Int?): InvoicesRecord {
        this.agreementId = value
        return this
    }

    override fun value5(value: BigDecimal?): InvoicesRecord {
        this.amount = value
        return this
    }

    override fun value6(value: CostCategory?): InvoicesRecord {
        this.costCategory = value
        return this
    }

    override fun value7(value: String?): InvoicesRecord {
        this.fileName = value
        return this
    }

    override fun value8(value: ByteArray?): InvoicesRecord {
        this.fileContent = value
        return this
    }

    override fun value9(value: LocalDateTime?): InvoicesRecord {
        this.createdAt = value
        return this
    }

    override fun value10(value: LocalDateTime?): InvoicesRecord {
        this.updatedAt = value
        return this
    }

    override fun value11(value: String?): InvoicesRecord {
        this.createdBy = value
        return this
    }

    override fun values(value1: Int?, value2: LocalDateTime?, value3: LocalDateTime?, value4: Int?, value5: BigDecimal?, value6: CostCategory?, value7: String?, value8: ByteArray?, value9: LocalDateTime?, value10: LocalDateTime?, value11: String?): InvoicesRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        this.value11(value11)
        return this
    }

    /**
     * Create a detached, initialised InvoicesRecord
     */
    constructor(id: Int? = null, startDate: LocalDateTime? = null, endDate: LocalDateTime? = null, agreementId: Int? = null, amount: BigDecimal? = null, costCategory: CostCategory? = null, fileName: String? = null, fileContent: ByteArray? = null, createdAt: LocalDateTime? = null, updatedAt: LocalDateTime? = null, createdBy: String? = null): this() {
        this.id = id
        this.startDate = startDate
        this.endDate = endDate
        this.agreementId = agreementId
        this.amount = amount
        this.costCategory = costCategory
        this.fileName = fileName
        this.fileContent = fileContent
        this.createdAt = createdAt
        this.updatedAt = updatedAt
        this.createdBy = createdBy
    }
}
