/*
 * This file is generated by jOOQ.
 */
package home.dj.jooq.model.tables


import home.dj.jooq.model.LandlordApp
import home.dj.jooq.model.keys.USER_CREDENTIALS_PKEY
import home.dj.jooq.model.keys.USER_CREDENTIALS__USER_CREDENTIALS_USER_ID_FKEY
import home.dj.jooq.model.tables.records.UserCredentialsRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row6
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserCredentials(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, UserCredentialsRecord>?,
    aliased: Table<UserCredentialsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<UserCredentialsRecord>(
    alias,
    LandlordApp.LANDLORD_APP,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>landlord_app.user_credentials</code>
         */
        val USER_CREDENTIALS = UserCredentials()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UserCredentialsRecord> = UserCredentialsRecord::class.java

    /**
     * The column <code>landlord_app.user_credentials.id</code>.
     */
    val ID: TableField<UserCredentialsRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>landlord_app.user_credentials.credential</code>.
     */
    val CREDENTIAL: TableField<UserCredentialsRecord, String?> = createField(DSL.name("credential"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>landlord_app.user_credentials.user_id</code>.
     */
    val USER_ID: TableField<UserCredentialsRecord, Int?> = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>landlord_app.user_credentials.created_at</code>.
     */
    val CREATED_AT: TableField<UserCredentialsRecord, LocalDateTime?> = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>landlord_app.user_credentials.updated_at</code>.
     */
    val UPDATED_AT: TableField<UserCredentialsRecord, LocalDateTime?> = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>landlord_app.user_credentials.created_by</code>.
     */
    val CREATED_BY: TableField<UserCredentialsRecord, String?> = createField(DSL.name("created_by"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<UserCredentialsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<UserCredentialsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>landlord_app.user_credentials</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>landlord_app.user_credentials</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>landlord_app.user_credentials</code> table reference
     */
    constructor(): this(DSL.name("user_credentials"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, UserCredentialsRecord>): this(Internal.createPathAlias(child, key), child, key, USER_CREDENTIALS, null)
    override fun getSchema(): Schema = LandlordApp.LANDLORD_APP
    override fun getIdentity(): Identity<UserCredentialsRecord, Int?> = super.getIdentity() as Identity<UserCredentialsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<UserCredentialsRecord> = USER_CREDENTIALS_PKEY
    override fun getKeys(): List<UniqueKey<UserCredentialsRecord>> = listOf(USER_CREDENTIALS_PKEY)
    override fun getReferences(): List<ForeignKey<UserCredentialsRecord, *>> = listOf(USER_CREDENTIALS__USER_CREDENTIALS_USER_ID_FKEY)

    private lateinit var _users: Users
    fun users(): Users {
        if (!this::_users.isInitialized)
            _users = Users(this, USER_CREDENTIALS__USER_CREDENTIALS_USER_ID_FKEY)

        return _users;
    }
    override fun `as`(alias: String): UserCredentials = UserCredentials(DSL.name(alias), this)
    override fun `as`(alias: Name): UserCredentials = UserCredentials(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): UserCredentials = UserCredentials(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): UserCredentials = UserCredentials(name, null)

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row6<Int?, String?, Int?, LocalDateTime?, LocalDateTime?, String?> = super.fieldsRow() as Row6<Int?, String?, Int?, LocalDateTime?, LocalDateTime?, String?>
}
